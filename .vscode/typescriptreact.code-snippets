{
  "Body for tests": {
    "prefix": "create test",
    "body": [
      "import React from \"react\";",
      "import { render } from \"@testing-library/react\";",
      "import { $1 } from \"../$1\";",
      "",
      "describe(\"<$1 /> \", () => {",
      "  it(\"should render a $1 component\", () => {",
      "    const { getByText } = render(<$1 />);",
      "    expect(getByText(\"FOO\")).toBeInTheDocument();",
      "  });",
      "});",
      ""
    ],
    "description": "Skeleton for creating a test"
  },
  "Body for react component": {
    "prefix": "create react component",
    "body": [
      "import React from \"react\";",
      "import clsx from \"clsx\";",
      "import { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";",
      "",
      "const styles = () =>",
      "  createStyles({",
      "    root: { display: \"flex\" },",
      "  });",
      "",
      "interface $1Props {",
      "  classes: ClassesType[\"classes\"];",
      "  showRootStyle: boolean;",
      "}",
      "",
      "type ClassesType = WithStyles<typeof styles>;",
      "",
      "const $1Base = React.forwardRef<HTMLDivElement, $1Props & React.HTMLAttributes<HTMLDivElement>>(",
      "  ({ children, classes, showRootStyle, ...rest }, ref) => {",
      "    return (",
      "      <div",
      "        {...rest}",
      "        ref={ref}",
      "        className={clsx({",
      "          [classes.root]: showRootStyle,",
      "        })}",
      "      >",
      "        <div>{children}</div>",
      "      </div>",
      "    );",
      "  }",
      ");",
      "export const $1 = withStyles(styles)($1Base);",
      ""
    ],
    "description": "Skeleton for a component with Material UI"
  },
  "useReducer": {
    "prefix": "create a reducer",
    "body": [
      "// START REMOVE FROM COMPONENT",
      "type ActionType = {",
      "  type: string;",
      "  value: any;",
      "};",
      "interface ReducerStateProp {",
      "  count: number;",
      "}",
      "const initialState = { count: 0 } as ReducerStateProp;",
      "function setupReducer(initStates: ReducerStateProp): ReducerStateProp {",
      "  return initStates;",
      "}",
      "function reducer(state: ReducerStateProp, action: ActionType): ReducerStateProp {",
      "  switch (action.type) {",
      "    case \"increment\":",
      "      return { count: state.count + 1 };",
      "    case \"decrement\":",
      "      return { count: state.count - 1 };",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "// END REMOVE FROM COMPONENT",
      "const [state, dispatch] = React.useReducer<React.Reducer<ReducerStateProp, ActionType>, ReducerStateProp>(reducer, initialState, setupReducer);",
      "// Count: {state.count}",
      "// <button onClick={() => dispatch({type: 'decrement'})}>-</button>"
    ],
    "description": "React useReducer() hook"
  },
  "whyDidYouUpdate": {
    "prefix": "whyDidYouUpdate",
    "body": [
      "function useWhyDidYouUpdate(name, props) {",
      "  const previousProps = React.useRef();",
      "",
      "  React.useEffect(() => {",
      "    if (previousProps.current) {",
      "      // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "      // @ts-ignore",
      "      const allKeys = Object.keys({ ...previousProps.current, ...props });",
      "      const changesObj = {};",
      "      allKeys.forEach(key => {",
      "        // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "        // @ts-ignore",
      "        if (previousProps.current[key] !== props[key]) {",
      "          // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "          // @ts-ignore",
      "          changesObj[key] = {",
      "            // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "            // @ts-ignore",
      "            from: previousProps.current[key],",
      "            to: props[key],",
      "          };",
      "        }",
      "      });",
      "",
      "      if (Object.keys(changesObj).length) {",
      "        console.log(\"[why-did-you-update]\", name, changesObj);",
      "      }",
      "    }",
      "",
      "    previousProps.current = props;",
      "  });",
      "}"
    ],
    "description": "Hook to be able to inspect why a component did update"
  }
}
